// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251029142423_InitialClean")]
    partial class InitialClean
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:HistoryTableMigrationIdColumnName", "migration_id")
                .HasAnnotation("Relational:HistoryTableName", "__EFMigrationsHistory")
                .HasAnnotation("Relational:HistoryTableProductVersionColumnName", "product_version")
                .HasAnnotation("Relational:HistoryTableSchema", "public")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Bookings.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CancellationReason")
                        .HasColumnType("integer")
                        .HasColumnName("cancellation_reason");

                    b.Property<DateTime?>("CancelledAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at_utc");

                    b.Property<DateTime?>("CompletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at_utc");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime>("EndUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_utc");

                    b.Property<bool>("IsReviewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_reviewed");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<int>("ServiceType")
                        .HasColumnType("integer")
                        .HasColumnName("service_type");

                    b.Property<Guid>("SitterProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("sitter_profile_id");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_utc");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_bookings");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_bookings_pet_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_bookings_status");

                    b.HasIndex("OwnerId", "CreatedAt")
                        .HasDatabaseName("ix_bookings_owner_created");

                    b.HasIndex("SitterProfileId", "StartUtc", "EndUtc")
                        .HasDatabaseName("ix_bookings_sitter_period");

                    b.ToTable("bookings", (string)null);
                });

            modelBuilder.Entity("Domain.Bookings.BookingCareInstructionSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_booking_care_instruction_snapshots");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("ix_booking_care_instruction_snapshots_booking_id");

                    b.ToTable("booking_care_instruction_snapshots", (string)null);
                });

            modelBuilder.Entity("Domain.Bookings.BookingStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("ChangedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at_utc");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_booking_status_history");

                    b.HasIndex("BookingId")
                        .HasDatabaseName("ix_booking_status_history_booking_id");

                    b.ToTable("booking_status_history", (string)null);
                });

            modelBuilder.Entity("Domain.Owners.EmergencyContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_profile_id");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasColumnName("phone");

                    b.HasKey("Id")
                        .HasName("pk_owner_emergency_contacts");

                    b.HasIndex("OwnerProfileId")
                        .HasDatabaseName("ix_owner_emergency_contacts_owner_profile_id");

                    b.ToTable("owner_emergency_contacts", (string)null);
                });

            modelBuilder.Entity("Domain.Owners.OwnerProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("DefaultCareNotes")
                        .HasColumnType("varchar(800)")
                        .HasColumnName("default_care_notes");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("PreferredTimezone")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("preferred_timezone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_owner_profiles");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_owner_profiles_is_active");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_owner_profiles_user_id");

                    b.ToTable("owner_profiles", (string)null);
                });

            modelBuilder.Entity("Domain.Pets.CareInstruction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_pet_instructions");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_pet_instructions_pet_id");

                    b.ToTable("pet_instructions", (string)null);
                });

            modelBuilder.Entity("Domain.Pets.Medical.MedicalEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Details")
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("details");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_pet_medical_entries");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_pet_medical_entries_pet_id");

                    b.ToTable("pet_medical_entries", (string)null);
                });

            modelBuilder.Entity("Domain.Pets.Medical.PetAllergy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<int>("Severity")
                        .HasColumnType("integer")
                        .HasColumnName("severity");

                    b.HasKey("Id")
                        .HasName("pk_pet_allergies");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_pet_allergies_pet_id");

                    b.ToTable("pet_allergies", (string)null);
                });

            modelBuilder.Entity("Domain.Pets.Medical.PetMedication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("dosage");

                    b.Property<DateTime?>("EndUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("schedule");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_utc");

                    b.HasKey("Id")
                        .HasName("pk_pet_medications");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_pet_medications_pet_id");

                    b.ToTable("pet_medications", (string)null);
                });

            modelBuilder.Entity("Domain.Pets.Medical.PetVaccination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AdministeredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("administered_on_utc");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime?>("ExpiresOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_on_utc");

                    b.Property<Guid>("PetId")
                        .HasColumnType("uuid")
                        .HasColumnName("pet_id");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("vaccine_name");

                    b.HasKey("Id")
                        .HasName("pk_pet_vaccinations");

                    b.HasIndex("PetId")
                        .HasDatabaseName("ix_pet_vaccinations_pet_id");

                    b.ToTable("pet_vaccinations", (string)null);
                });

            modelBuilder.Entity("Domain.Pets.Pet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Breed")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("breed");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_pets");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_pets_owner_id");

                    b.HasIndex("OwnerId", "Type")
                        .HasDatabaseName("ix_pets_owner_type");

                    b.ToTable("pets", (string)null);
                });

            modelBuilder.Entity("Domain.Sitters.AvailabilitySlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime>("EndUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_utc");

                    b.Property<Guid>("SitterProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("sitter_profile_id");

                    b.Property<DateTime>("StartUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_utc");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_sitter_availability_slots");

                    b.HasIndex("SitterProfileId")
                        .HasDatabaseName("ix_sitter_availability_slots_profile_id");

                    b.HasIndex("StartUtc", "EndUtc")
                        .HasDatabaseName("ix_sitter_availability_slots_range");

                    b.ToTable("sitter_availability_slots", (string)null);
                });

            modelBuilder.Entity("Domain.Sitters.Sitter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sitters");
                });

            modelBuilder.Entity("Domain.Sitters.SitterProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("average_rating");

                    b.Property<string>("Bio")
                        .HasColumnType("varchar(800)")
                        .HasColumnName("bio");

                    b.Property<int>("CompletedBookings")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("completed_bookings");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("ServicesOffered")
                        .HasColumnType("integer")
                        .HasColumnName("services_offered");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_sitter_profiles");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_sitter_profiles_is_active");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_sitter_profiles_user_id");

                    b.ToTable("sitter_profiles", (string)null);
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<int>("Roles")
                        .HasColumnType("integer")
                        .HasColumnName("roles");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Bookings.Booking", b =>
                {
                    b.OwnsOne("Domain.Bookings.BookingPrice", "Price", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("BaseAmount")
                                .HasPrecision(12, 2)
                                .HasColumnType("numeric(12,2)")
                                .HasColumnName("price_base_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("varchar(3)")
                                .HasColumnName("price_currency");

                            b1.Property<decimal>("ServiceFeeAmount")
                                .HasPrecision(12, 2)
                                .HasColumnType("numeric(12,2)")
                                .HasColumnName("price_service_fee_amount");

                            b1.Property<decimal>("ServiceFeePercent")
                                .HasPrecision(5, 2)
                                .HasColumnType("numeric(5,2)")
                                .HasColumnName("price_service_fee_percent");

                            b1.Property<decimal>("TotalAmount")
                                .HasPrecision(12, 2)
                                .HasColumnType("numeric(12,2)")
                                .HasColumnName("price_total_amount");

                            b1.HasKey("BookingId");

                            b1.ToTable("bookings");

                            b1.WithOwner()
                                .HasForeignKey("BookingId");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Bookings.BookingCareInstructionSnapshot", b =>
                {
                    b.HasOne("Domain.Bookings.Booking", null)
                        .WithMany("CareInstructionSnapshots")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Bookings.BookingStatusHistory", b =>
                {
                    b.HasOne("Domain.Bookings.Booking", null)
                        .WithMany("StatusHistory")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Owners.EmergencyContact", b =>
                {
                    b.HasOne("Domain.Owners.OwnerProfile", null)
                        .WithMany("EmergencyContacts")
                        .HasForeignKey("OwnerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Owners.OwnerProfile", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OwnerProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("varchar(120)")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("varchar(80)")
                                .HasColumnName("address_country");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("varchar(200)")
                                .HasColumnName("address_line1");

                            b1.Property<string>("Line2")
                                .HasColumnType("varchar(200)")
                                .HasColumnName("address_line2");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("varchar(40)")
                                .HasColumnName("address_postal_code");

                            b1.Property<string>("StateOrProvince")
                                .IsRequired()
                                .HasColumnType("varchar(120)")
                                .HasColumnName("address_state");

                            b1.HasKey("OwnerProfileId");

                            b1.ToTable("owner_profiles");

                            b1.WithOwner()
                                .HasForeignKey("OwnerProfileId");
                        });

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Domain.Pets.CareInstruction", b =>
                {
                    b.HasOne("Domain.Pets.Pet", null)
                        .WithMany("Instructions")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Pets.Medical.MedicalEntry", b =>
                {
                    b.HasOne("Domain.Pets.Pet", null)
                        .WithMany("MedicalEntries")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Pets.Medical.PetAllergy", b =>
                {
                    b.HasOne("Domain.Pets.Pet", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Pets.Medical.PetMedication", b =>
                {
                    b.HasOne("Domain.Pets.Pet", null)
                        .WithMany("Medications")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Pets.Medical.PetVaccination", b =>
                {
                    b.HasOne("Domain.Pets.Pet", null)
                        .WithMany("Vaccinations")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Sitters.AvailabilitySlot", b =>
                {
                    b.HasOne("Domain.Sitters.SitterProfile", null)
                        .WithMany("Availability")
                        .HasForeignKey("SitterProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Sitters.Sitter", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("SitterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_country");

                            b1.Property<string>("Line1")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_line1");

                            b1.Property<string>("Line2")
                                .HasColumnType("text")
                                .HasColumnName("address_line2");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_postal_code");

                            b1.Property<string>("StateOrProvince")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_state");

                            b1.HasKey("SitterId");

                            b1.ToTable("Sitters");

                            b1.WithOwner()
                                .HasForeignKey("SitterId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Email", "EmailValue", b1 =>
                        {
                            b1.Property<Guid>("SitterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");

                            b1.HasKey("SitterId");

                            b1.ToTable("Sitters");

                            b1.WithOwner()
                                .HasForeignKey("SitterId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Money", "HourlyRate", b1 =>
                        {
                            b1.Property<Guid>("SitterId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("hourly_rate_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("hourly_rate_currency");

                            b1.HasKey("SitterId");

                            b1.ToTable("Sitters");

                            b1.WithOwner()
                                .HasForeignKey("SitterId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("EmailValue")
                        .IsRequired();

                    b.Navigation("HourlyRate")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Sitters.SitterProfile", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Money", "BaseRate", b1 =>
                        {
                            b1.Property<Guid>("SitterProfileId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(12, 2)
                                .HasColumnType("numeric(12,2)")
                                .HasColumnName("base_rate_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("varchar(3)")
                                .HasColumnName("base_rate_currency");

                            b1.HasKey("SitterProfileId");

                            b1.ToTable("sitter_profiles");

                            b1.WithOwner()
                                .HasForeignKey("SitterProfileId");
                        });

                    b.Navigation("BaseRate");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("varchar(255)")
                                .HasColumnName("email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("ux_users_email");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Bookings.Booking", b =>
                {
                    b.Navigation("CareInstructionSnapshots");

                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("Domain.Owners.OwnerProfile", b =>
                {
                    b.Navigation("EmergencyContacts");
                });

            modelBuilder.Entity("Domain.Pets.Pet", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Instructions");

                    b.Navigation("MedicalEntries");

                    b.Navigation("Medications");

                    b.Navigation("Vaccinations");
                });

            modelBuilder.Entity("Domain.Sitters.SitterProfile", b =>
                {
                    b.Navigation("Availability");
                });
#pragma warning restore 612, 618
        }
    }
}
